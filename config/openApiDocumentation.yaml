openapi: 3.0.0
info:
  description: |
    API desarrollada por el equipo de 
    [PaperCube](http://papercube.pe) para la implementación
    del ERP de la empresa Max Import.
  version: "1.0.0"
  title: Max Import ERP
  # termsOfService: 'http://swagger.io/terms/'
  contact:
    email: soluciones@papercube.pe
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/PaperCube/max-import-papercube/1.0.0
  - url: http://localhost:3000
    description: Local Server
  - url: POR DEFINIR
    description: Development Server
  - url: POR DEFINIR
    description: Production Server
tags:
  - name: families
    description: Familia a la que pertenece un producto
  - name: subfamilies
    description: Subfamilia a la que pertenece un producto
  - name: Proforma
    description: Servicios asociados a la gestion de proformas
paths:
  /inventory/families:
    post:
      tags:
        - families
      summary: Crear una nueva familia
      operationId: addFamily
      responses:
        "201":
          description: Family created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseBaseSchema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Family"
        "400":
          description: Bad request
      requestBody:
        $ref: "#/components/requestBodies/Family"
    get:
      tags:
        - families
      summary: Listar todas las familias
      operationId: listFamily
      responses:
        "200":
          description: Families found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseBaseSchema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Family"
  "/inventory/families/{id}":
    get:
      tags:
        - families
      summary: Encontrar familia por Id
      description: Retorna una única familia
      operationId: getFamilyById
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Family"
        "400":
          description: Invalid ID supplied
        "404":
          description: Family not found

  /inventory/subfamilies:
    get:
      tags:
        - subfamilies
      summary: Listar todas las subfamilias
      operationId: listSubfamily
      responses:
        "200":
          description: Subfamilies found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subfamily"
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
components:
  schemas:
    ResponseBaseSchema:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
    ModelBaseSchema:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MenuBaseSchema:
      allOf:
        - $ref: "#/components/schemas/ModelBaseSchema"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
    Family:
      allOf:
        - $ref: "#/components/schemas/MenuBaseSchema"
        - type: object
    Subfamily:
      allOf:
        - $ref: "#/components/schemas/MenuBaseSchema"
        - type: object
          properties:
            familyId:
              type: integer
              format: int64
              description: Id de la familia a la que pertenece
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
  parameters:
    idParam:
      name: id
      in: path
      description: Id del recurso requerido.
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
  requestBodies:
    Family:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
            example:
              name: "Transformador"
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
