openapi: 3.0.0
info:
  description: |
    API desarrollada por el equipo de 
    [PaperCube](http://papercube.pe) para la implementaci√≥n
    del ERP de la empresa Max Import.
  version: '1.0.0'
  title: Max Import ERP
  # termsOfService: 'http://swagger.io/terms/'
  contact:
    email: soluciones@papercube.pe
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: http://localhost:3000
    description: Local Server
  - url: http://maximport-backend.q3d2pmiqsz.us-east-1.elasticbeanstalk.com
    description: Development Server
  - url: POR DEFINIR
    description: Production Server
  - url: https://virtserver.swaggerhub.com/PaperCube/max-import-papercube/1.0.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: families
    description: Familia a la que pertenece un producto
  - name: subfamilies
    description: Subfamilia a la que pertenece un producto
paths:
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/families':
    post:
      tags:
        - families
      summary: Crear una nueva familia
      operationId: addFamily
      responses:
        '201':
          description: Family created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Family"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Family'
    get:
      tags:
        - families
      summary: Listar todas las familias
      operationId: listFamily
      responses:
        '200':
          description: Families found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Family"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/families/{id}':
    get:
      tags:
        - families
      summary: Encontrar familia por Id
      operationId: getFamilyById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Family'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/subfamilies':
    post:
      tags:
        - subfamilies
      summary: Crear una nueva subfamilia
      operationId: addSubfamily
      responses:
        '201':
          description: Subfamily created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Subfamily"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Subfamily'
    get:
      tags:
        - subfamilies
      summary: Listar todas las subfamilias. Opcionalmente se puede filtrar por familia
      operationId: listSubfamily
      parameters:
        - $ref: '#/components/parameters/familyId'
      responses:
        '200':
          description: Subfamilies found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Subfamily"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/subfamilies/{id}':
    get:
      tags:
        - subfamilies
      summary: Encontrar subfamilia por Id
      operationId: getSubfamilyById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Subfamily'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/elements':
    post:
      tags:
        - elements
      summary: Crear un nuevo elemento
      operationId: addElement
      responses:
        '201':
          description: Element created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Element"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Element'
    get:
      tags:
        - elements
      summary: Listar todos los elementos. Opcionalmente se puede filtrar por subfamilia
      operationId: listElements
      parameters:
        - $ref: '#/components/parameters/subfamilyId'
      responses:
        '200':
          description: Elements found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Element"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/elements/{id}':
    get:
      tags:
        - elements
      summary: Encontrar elemento por Id
      operationId: getElementById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Element'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/models':
    post:
      tags:
        - models
      summary: Crear un nuevo modelo
      operationId: addModel
      responses:
        '201':
          description: Model created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Model"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Model'
    get:
      tags:
        - models
      summary: Listar todos los modelos. Opcionalmente se puede filtrar por elemento
      operationId: listModels
      parameters:
        - $ref: '#/components/parameters/elementId'
      responses:
        '200':
          description: Models found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Model"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/models/{id}':
    get:
      tags:
        - models
      summary: Encontrar modelo por Id
      operationId: getModelById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Model'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/providers':
    post:
      tags:
        - providers
      summary: Crear un nuevo proveedor
      operationId: addProvider
      responses:
        '201':
          description: Provider created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Provider"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Provider'
    get:
      tags:
        - providers
      summary: Listar todos los proveedores
      operationId: listProviders
      # parameters:
      #   - $ref: '#/components/parameters/elementId'
      responses:
        '200':
          description: Providers found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Provider"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/providers/{id}':
    get:
      tags:
        - providers
      summary: Encontrar proveedor por Id
      operationId: getProviderById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Provider'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/warehouses':
    post:
      tags:
        - warehouses
      summary: Crear un nuevo almacen
      operationId: addWarehouse
      responses:
        '201':
          description: Warehouse created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Warehouse"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Warehouse'
    get:
      tags:
        - warehouses
      summary: Listar todos los almacenes
      operationId: listWarehouses
      # parameters:
      #   - $ref: '#/components/parameters/elementId'
      responses:
        '200':
          description: Warehouses found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Warehouse"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/warehouses/{id}':
    get:
      tags:
        - warehouses
      summary: Encontrar almacen por Id
      operationId: getWarehouseById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Warehouse'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/products':
    post:
      tags:
        - products
      summary: Crear un nuevo producto
      operationId: addProduct
      responses:
        '201':
          description: Product created
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: "#/components/schemas/Product"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Product'
    get:
      tags:
        - products
      summary: Listar todos los productos. Existen filtros opcionales # TODO
      operationId: listProducts
      # parameters:
      #   - $ref: '#/components/parameters/elementId'
      responses:
        '200':
          description: Products found
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               type: array
          #               items:
          #                 $ref: "#/components/schemas/Product"
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
  '/products/{id}':
    get:
      tags:
        - products
      summary: Encontrar producto por Id
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - type: object
          #           properties:
          #             data:
          #               $ref: '#/components/schemas/Product'
          #         - $ref: "#/components/schemas/ResponseBaseSchema"
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
  # ----------------------------------------------------------------------
  # ----------------------------------------------------------------------
  '/supplies':
    post:
      tags:
        - supplies
      summary: Crear un nuevo abastecimiento
      operationId: addSupply
      responses:
        '201':
          description: Supply created
        '400':
          description: Bad request
      requestBody:
        $ref: '#/components/requestBodies/Supply'
    get:
      tags:
        - supplies
      summary: Listar todos los abastecimientos. Ordenado por fecha de creaci√≥n. Existen filtros opcionales.
      operationId: listSupplies
      parameters:
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
        - $ref: '#/components/parameters/pagePagination'
        - $ref: '#/components/parameters/pageSizePagination'
      responses:
        '200':
          description: Supplies found
  '/supplies/{id}':
    get:
      tags:
        - supplies
      summary: Encontrar abastecimiento por Id
      operationId: getSupplyById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
    delete:
      tags:
        - supplies
      summary: Eliminar abastecimiento por Id
      operationId: deleteSupplyById
      parameters:
        - $ref: '#/components/parameters/paramId'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
components:
  # schemas:
  #   Family:
  #     allOf:
  #       - $ref: "#/components/schemas/MenuBaseSchema"
  #   Subfamily:
  #     allOf:
  #       - type: object
  #         properties:
  #           familyId:
  #             type: integer
  #             format: int32
  #             description: Id de la familia a la que pertenece
  #       - $ref: "#/components/schemas/MenuBaseSchema"
  #   Element:
  #     allOf:
  #       - type: object
  #         properties:
  #           subfamilyId:
  #             type: integer
  #             format: int32
  #             description: Id de la subfamilia a la que pertenece
  #       - $ref: "#/components/schemas/MenuBaseSchema"
  #   Model:
  #     allOf:
  #       - type: object
  #         properties:
  #           elementId:
  #             type: integer
  #             format: int32
  #             description: Id del elemento al que pertenece
  #       - $ref: "#/components/schemas/MenuBaseSchema"
  #   Product:
  #     allOf:
  #       - type: object
  #         properties:
  #           id:
  #             type: integer
  #             format: int32
  #           familyId:
  #             type: integer
  #             format: int32
  #           subfamilyId:
  #             type: integer
  #             format: int32
  #           elementId:
  #             type: integer
  #             format: int32
  #           modelId:
  #             type: integer
  #             format: int32
  #           familyName:
  #             type: string
  #           subfamilyName:
  #             type: string
  #           elementName:
  #             type: string
  #           modelName:
  #             type: string
  #           code:
  #             type: string
  #           compatibility:
  #             type: string
  #           imagePath:
  #             type: string
  #           suggestedPrice:
  #             type: integer
  #             format: int32
  #             description: Precio sugerido en centimos
  #       - $ref: "#/components/schemas/ModelBaseSchema"
  #   Provider:
  #     allOf:
  #       - $ref: "#/components/schemas/MenuBaseSchema"
  #   Warehouse:
  #     allOf:
  #       - type: object
  #         properties:
  #           address:
  #             type: string
  #       - $ref: "#/components/schemas/MenuBaseSchema"
  #   MenuBaseSchema:
  #     allOf:
  #       - type: object
  #         properties:
  #           id:
  #             type: integer
  #             format: int32
  #           name:
  #             type: string
  #       - $ref: "#/components/schemas/ModelBaseSchema"
  #   ModelBaseSchema:
  #     type: object
  #     properties:
  #       createdAt:
  #         type: string
  #         format: date-time
  #       updatedAt:
  #         type: string
  #         format: date-time
  #   ResponseBaseSchema:
  #     type: object
  #     properties:
  #       message:
  #         type: string
  #       status:
  #         type: integer
  parameters:
    paramId:
      name: id
      in: path
      description: Id del recurso requerido.
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    familyId:
      name: familyId
      in: query
      description: Id de la categoria "familia"
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
    subfamilyId:
      name: subfamilyId
      in: query
      description: Id de la categoria "subfamilia"
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
    elementId:
      name: elementId
      in: query
      description: Id de la categoria "elemento"
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
    fromDate:
      name: from
      in: query
      description: Fecha inicial de la consulta "YYYY-MM-DD". El valor por defecto es 1 semana antes del dia actual
      required: false
      schema:
        type: string
        format: date
    toDate:
      name: to
      in: query
      description: Fecha final de la consulta "YYYY-MM-DD". El valor por defecto es el dia actual
      required: false
      schema:
        type: string
        format: date
    pagePagination:
      name: page
      in: query
      description: Numero de pagina a consultar. Indexado en 1
      required: false
      schema:
        type: integer
        format: int32
    pageSizePagination:
      name: pageSize
      in: query
      description: Cantidad de items por pagina
      required: false
      schema:
        type: integer
        format: int32
  requestBodies:
    Family:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
            example:
              name: 'Nueva Familia'
            required:
              - name
      required: true
    Subfamily:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              familyId:
                type: integer
            required:
              - name
              - familyId
            example:
              name: 'Nueva Subfamilia'
              familyId: 1
      required: true
    Element:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              subfamilyId:
                type: integer
            required:
              - name
              - subfamilyId
            example:
              name: 'Nuevo Elemento'
              subfamilyId: 1
      required: true
    Model:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              elementId:
                type: integer
            required:
              - name
              - elementId
            example:
              name: 'Nuevo Modelo'
              elementId: 1
      required: true
    Product:
      content:
        application/json:
          schema:
            type: object
            properties:
              modelId:
                type: string
                description: Id del modelo al que pertenece. De este Id se obtiene la familia, subfamilia y elemento
              compatibility:
                type: string
                description: Marcas con los que es compatible el producto
              suggestedPrice:
                type: integer
                format: int32
                description: Precio sugerido en centimos
            required:
              - modelId
              - compatibility
              - suggestedPrice
            example:
              modelId: 1
              compatibility: 'Compatible con todos'
              suggestedPrice: 10000
      required: true
    Provider:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
            example:
              name: 'Nuevo proveedor'
            required:
              - name
      required: true
    Warehouse:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
            example:
              name: 'Nuevo almacen'
              address: 'Nueva direccion'
            required:
              - name
              - address
      required: true
    Supply:
      content:
        application/json:
          schema:
            type: object
            properties:
              providerId:
                type: integer
                format: int32
                description: Id del proveedor
              warehouseId:
                type: integer
                format: int32
                description: Id del almacen destino
              observations:
                type: string
              suppliedProducts:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: integer
                      format: int32
                      description: Id del producto
                    boxSize:
                      type: integer
                      format: int32
                      description: Cantidad de unidades en la caja
                    quantity:
                      type: integer
                      format: int32
                      description: Cantidad de cajas a recibir
                description: Se puede tener elementos del mismo productId pero distinto boxSize
            example:
              providerId: 1
              warehouseId: 1
              observations: 'Ninguna'
              suppliedProducts:
                [
                  { productId: 1, boxSize: 20, quantity: 100 },
                  { productId: 1, boxSize: 50, quantity: 20 },
                  { productId: 2, boxSize: 50, quantity: 10 },
                ]
            required:
              - providerId
              - warehouseId
              - suppliedProducts
      required: true
